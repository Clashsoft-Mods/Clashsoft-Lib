package clashsoft.cslib.minecraft;

import java.util.Collections;
import java.util.List;

import clashsoft.cslib.minecraft.common.BaseProxy;
import clashsoft.cslib.minecraft.network.CSNetHandler;
import clashsoft.cslib.minecraft.util.CSConfig;
import clashsoft.cslib.util.CSLog;
import clashsoft.cslib.util.CSString;
import cpw.mods.fml.common.FMLCommonHandler;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPostInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.network.NetworkRegistry;

import net.minecraftforge.common.MinecraftForge;

/**
 * The Class BaseMod.
 * <p>
 * This class provides overrideable methods that ensure a basic mod environment. It can
 * automatically setup a configuration file, a network handler, an event handler and a proxy for
 * client- and server-side operations. The class also stores information about the mod itself,
 * including the name, the mod ID, the version, the download URL, a list of authors and others.
 * 
 * @author Clashsoft
 * @param <N>
 */
public abstract class BaseMod<N extends CSNetHandler>
{
	public String		modID;
	public String		name;
	public String		acronym;
	public String		version;
	public String		logoFile	= "";
	public String		url			= "";
	public List<String>	authors		= Collections.EMPTY_LIST;
	
	public boolean		hasConfig;
	
	public Class<N>		netHandlerClass;
	public N			netHandler;
	
	public Object		eventHandler;
	
	public BaseProxy	proxy;
	public boolean		isClient;
	
	public BaseMod(BaseProxy proxy, String modID, String name, String version)
	{
		this(proxy, modID, name, CSString.getAcronym(name), version);
	}
	
	public BaseMod(BaseProxy proxy, String modID, String name, String acronym, String version)
	{
		this.proxy = proxy;
		this.modID = modID;
		this.name = name;
		this.acronym = acronym;
		this.version = version;
		
		this.logoFile = this.modID + ":logo.png";
		this.isClient = proxy == null ? FMLCommonHandler.instance().getSide().isClient() : proxy.isClient();
	}
	
	/**
	 * Reads this mods config file. It is recommended to {@link CSConfig} to read the config, since
	 * it is already initialised with this mod's config file.
	 * 
	 * @see CSConfig
	 */
	public void readConfig()
	{
		CSLog.warning("The mod " + this.name + " claims that it has a config, but doesn't override the read method.");
	}
	
	/**
	 * Checks if an update for this mod is available. The default implementation does not check for
	 * any updates.
	 * 
	 * @see CSUpdate
	 */
	public void updateCheck()
	{
	}
	
	/**
	 * Creates a new network handler. The default implementation creates a new instance of the class
	 * {@link BaseMod#netHandlerClass} and uses it as the net handler. If this fails, a basic
	 * {@link CSNetHandler} is created to support packet sending and receiving.
	 * 
	 * @return a network handler
	 * @see CSNetHandler
	 * @see BaseMod#netHandlerClass
	 */
	public N createNetHandler()
	{
		if (this.netHandlerClass != null)
		{
			try
			{
				return this.netHandlerClass.newInstance();
			}
			catch (Exception ex)
			{
				ex.printStackTrace();
			}
		}
		// At least provide a default net handler, so the mod is able to send packets
		return (N) new CSNetHandler(this.name);
	}
	
	/**
	 * Populates the FML {@link ModMetadata} {@code metadata} with this mod's properties.
	 * 
	 * @param metadata
	 *            the {@link ModMetadata} to populate.
	 */
	public void writeMetadata(ModMetadata metadata)
	{
		metadata.autogenerated = false;
		metadata.name = this.name;
		metadata.modId = this.modID;
		metadata.version = this.version;
		metadata.logoFile = this.logoFile;
		metadata.url = this.url;
		metadata.authorList = this.authors;
	}
	
	public void preInit(FMLPreInitializationEvent event)
	{
		this.writeMetadata(event.getModMetadata());
		
		if (this.hasConfig)
		{
			CSConfig.loadConfig(event.getSuggestedConfigurationFile(), this.name);
			this.readConfig();
			CSConfig.saveConfig();
		}
		
		if (this.proxy != null)
		{
			NetworkRegistry.INSTANCE.registerGuiHandler(this, this.proxy);
			this.proxy.preInit(event);
		}
		
		if (this.netHandler == null)
		{
			this.netHandler = this.createNetHandler();
		}
		
		if (this.eventHandler != null)
		{
			MinecraftForge.EVENT_BUS.register(this.eventHandler);
			FMLCommonHandler.instance().bus().register(this.eventHandler);
		}
	}
	
	public void init(FMLInitializationEvent event)
	{
		if (this.proxy != null)
		{
			this.proxy.init(event);
		}
		
		if (this.netHandler != null)
		{
			this.netHandler.init();
		}
	}
	
	public void postInit(FMLPostInitializationEvent event)
	{
		if (this.isClient)
		{
			this.updateCheck();
		}
		
		if (this.proxy != null)
		{
			this.proxy.postInit(event);
		}
		
		if (this.netHandler != null)
		{
			this.netHandler.postInit();
		}
	}
}
