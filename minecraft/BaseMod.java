package clashsoft.cslib.minecraft;

import java.util.Collections;
import java.util.List;

import clashsoft.cslib.minecraft.network.CSNetHandler;
import clashsoft.cslib.minecraft.util.CSConfig;
import clashsoft.cslib.util.CSLog;
import clashsoft.cslib.util.CSString;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPostInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;

public abstract class BaseMod<N extends CSNetHandler>
{
	public String		modID;
	public String		name;
	public String		acronym;
	public String		version;
	public String		logoFile	= "";
	public String		url			= "";
	public List<String>	authors		= Collections.EMPTY_LIST;
	
	public boolean		hasConfig;
	
	public Class<N>		netHandlerClass;
	public N			netHandler;
	
	public BaseMod(String modID, String name, String version)
	{
		this(modID, name, CSString.getAcronym(name), version);
	}
	
	public BaseMod(String modID, String name, String acronym, String version)
	{
		this.modID = modID;
		this.name = name;
		this.acronym = acronym;
		this.version = version;
		
		this.logoFile = this.modID + ":logo.png";
	}
	
	public void readConfig()
	{
		if (this.hasConfig)
		{
			CSLog.warning("The mod " + this.name + " claims that it has a config, but doesn't override the read method.");
		}
	}
	
	public void updateCheck()
	{
	}
	
	public void preInit(FMLPreInitializationEvent event)
	{
		writeMetadata(event.getModMetadata());
		
		if (this.hasConfig)
		{
			CSConfig.loadConfig(event.getSuggestedConfigurationFile(), this.name);
			this.readConfig();
			CSConfig.saveConfig();
		}
		
		if (this.netHandler == null && this.netHandlerClass != null)
		{
			try
			{
				this.netHandler = (N) this.netHandlerClass.newInstance();
			}
			catch (Exception ex)
			{
				ex.printStackTrace();
			}
		}
	}
	
	public void init(FMLInitializationEvent event)
	{
		if (this.netHandler != null)
		{
			this.netHandler.init();
		}
	}
	
	public void postInit(FMLPostInitializationEvent event)
	{
		this.updateCheck();
		
		if (this.netHandler != null)
		{
			this.netHandler.postInit();
		}
	}
	
	public void writeMetadata(ModMetadata metadata)
	{
		metadata.autogenerated = false;
		metadata.name = this.name;
		metadata.modId = this.modID;
		metadata.version = this.version;
		metadata.logoFile = this.logoFile;
		metadata.url = this.url;
		metadata.authorList = this.authors;
	}
}
